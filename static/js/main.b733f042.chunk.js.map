{"version":3,"sources":["components/c1-header/Header.module.css","components/c2-weather/Weather.module.css","components/c3- history/History.module.css","serviceWorker.ts","components/c1-header/Header.tsx","api/weatherApi.ts","redux/weatherReducer.ts","redux/store.ts","components/c2-weather/search/Search.tsx","components/c2-weather/Weather.tsx","components/c3- history/History.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","style","grow","AppBar","color","Toolbar","container","List","nav","to","ListItem","button","instance","axios","create","baseURL","process","getWeatherApi","cityName","get","then","response","data","initialState","weather","weatherHistory","actions","type","rootReducer","combineReducers","weatherPage","state","action","reverse","useAppSelector","useSelector","store","createStore","composeWithDevTools","applyMiddleware","thunk","Search","dispatch","useDispatch","useState","city","setCity","onSubmit","e","preventDefault","a","console","log","TextField","label","value","onChange","currentTarget","Weather","name","main","sys","item","Math","floor","temp","width","verticalAlign","src","icon","alt","description","Date","Number","sunrise","toLocaleTimeString","sunset","History","useEffect","map","element","index","key","display","alignItems","justifyContent","margin","App","exact","path","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b733f042.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__1bD5z\",\"grow\":\"Header_grow__2ypVy\",\"nav\":\"Header_nav__2XMEw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__2UBrB\",\"item\":\"Weather_item__3BHog\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"History_container__3yJz0\",\"item\":\"History_item__jBlDa\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport style from './Header.module.css';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport {NavLink} from 'react-router-dom';\n\n\nexport default function Header() {\n  return (\n    <div className={style.grow}>\n      <AppBar color=\"inherit\">\n        <Toolbar className={style.container}>\n          <div className={style.grow}/>\n          <List className={style.nav}>\n            <NavLink to='/'>\n              <ListItem button>\n                Weather\n              </ListItem>\n            </NavLink>\n            <NavLink to='/history'>\n              <ListItem button>\n                History\n              </ListItem>\n            </NavLink>\n          </List>\n          <div className={style.grow}/>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\n","import axios from 'axios'\nimport {LocationWeather, Weather} from '../types/entities'\n\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL\n})\n\nexport const getWeatherApi = {\n  getWeather(cityName: string) {\n    return instance.get<LocationWeather>(`/weather?city=${cityName}`)\n      .then(response => {\n        return response.data\n      })\n  },\n  getHistoryWeather() {\n    return instance.get<Weather[]>(`/history`)\n      .then(response => {\n        return response.data\n      })\n  },\n\n}\n\n\n\n\n\n\n\n","import {getWeatherApi} from '../api/weatherApi'\nimport {Dispatch} from 'redux'\nimport {Weather} from '../types/entities'\nimport {InferActionTypes} from './store'\n\n\nconst SET_WEATHER_DATA = 'SET_WEATHER_DATA'\nconst SET_WEATHER_HISTORY = 'SET_WEATHER_HISTORY'\n\n\nconst initialState = {\n  weather: {} as Weather,\n  weatherHistory: [] as Weather[]\n}\n\ntype InitialStateType = typeof initialState\n\nexport const weatherReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n    case SET_WEATHER_DATA: {\n      return {\n        ...state,\n        weather: action.weather,\n\n      }\n    }\n    case SET_WEATHER_HISTORY: {\n      return {\n        ...state,\n        weatherHistory: action.weatherHistory.reverse()\n      }\n    }\n    default:\n      return state\n  }\n}\n\ntype ActionsType = InferActionTypes<typeof actions>\n\nconst actions = {\n  setWeatherDataSuccess: (weather: Weather) => {\n    return {\n      type: SET_WEATHER_DATA,\n      weather\n    } as const\n  },\n  setWeatherHistorySuccess: (weatherHistory: Weather[]) => {\n    return {\n      type: SET_WEATHER_HISTORY,\n      weatherHistory\n    } as const\n  },\n\n}\n\n\nexport const getCityWeather = (cityName: string) => async (dispatch: Dispatch<ActionsType>) => {\n  let data = await getWeatherApi.getWeather(cityName)\n  console.log(data)\n  dispatch(actions.setWeatherDataSuccess(data.weather))\n\n}\n\n\nexport const getHistoryWeather = () => async (dispatch: Dispatch<ActionsType>) => {\n  let data = await getWeatherApi.getHistoryWeather()\n  console.log(data)\n  dispatch(actions.setWeatherHistorySuccess(data))\n\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {weatherReducer} from './weatherReducer';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {useSelector, TypedUseSelectorHook} from 'react-redux'\n\n\nconst rootReducer = combineReducers({\n  weatherPage: weatherReducer,\n\n});\n\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\n\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));","import React, {ChangeEvent, useState} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport {useDispatch} from 'react-redux';\nimport {getCityWeather} from '../../../redux/weatherReducer';\n\nexport default function Search() {\n  const dispatch = useDispatch();\n\n\n  const [city, setCity] = useState('')\n\n  const getWeatherInCity = (e:any) => {\n    e.preventDefault();\n    dispatch(getCityWeather(city))\n    setCity('')\n  }\n\n  const handleWordSearchChange = (e: ChangeEvent<HTMLInputElement>) => setCity(e.currentTarget.value)\n\n\n  return (\n    <form onSubmit={getWeatherInCity}>\n      <TextField\n        label=\"Enter City\"\n        color=\"primary\"\n        value={city}\n        onChange={handleWordSearchChange}\n      />\n    </form>)\n\n}\n\n","import React from 'react';\nimport {useAppSelector} from '../../redux/store';\nimport style from './Weather.module.css';\nimport Search from './search/Search';\n\n\nexport default function Weather() {\n\n  const name = useAppSelector(state => state.weatherPage.weather.name)\n  const main = useAppSelector(state => state.weatherPage.weather.main)\n  const weather = useAppSelector(state => state.weatherPage.weather.weather)\n  const sys = useAppSelector(state => state.weatherPage.weather.sys)\n\n  return <div className={style.container}>\n    <div className={style.item}>\n      <Search/>\n      {name && <div><b>City : </b>{name}</div>}\n      {main && <div><b>Temperature : </b>{Math.floor(main.temp)}C{'\\u00b0'}</div>}\n      {weather &&\n      <div>\n        <b>Description : </b>\n        <img style={{width: '30px', verticalAlign: 'middle'}}\n             src={`http://openweathermap.org/img/w/${weather[0].icon}.png`}\n             alt=''/>\n        {weather[0].description}\n      </div>}\n      {sys && <div><b>Sunrise : </b>{new Date(Number(sys.sunrise) * 1000).toLocaleTimeString()}</div>}\n      {sys && <div><b>Sunset : </b>{new Date(Number(sys.sunset) * 1000).toLocaleTimeString()}</div>}\n\n    </div>\n  </div>\n}\n\n","import React, {useEffect} from 'react'\nimport style from './History.module.css'\nimport {useAppSelector} from '../../redux/store'\nimport {useDispatch} from 'react-redux'\nimport {getHistoryWeather} from '../../redux/weatherReducer'\n\nexport default function History() {\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getHistoryWeather())\n  }, [dispatch])\n\n  const weatherHistory = useAppSelector(state => state.weatherPage.weatherHistory)\n\n  return <div className={style.container}>\n    <div className={style.item}>\n      {weatherHistory\n        .map((element, index) => {\n          return <div key={index} style={{\n            display: 'flex'\n          }}>\n            {/*<div style={{alignItems: 'center', justifyContent: 'center', display: 'flex', margin: '10px'}}>*/}\n            {/*  {element.datesInfo.day}.{element.datesInfo.month}.{element.datesInfo.year} {element.datesInfo.hours}:{element.datesInfo.minutes}*/}\n            {/*</div>*/}\n            <div style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              display: 'flex',\n              margin: '10px',\n            }}>\n              <b>{element.name}</b>\n            </div>\n            <div style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              display: 'flex',\n              margin: '10px'\n            }}>\n              <b>{Math.floor(element.main.temp)}C{'\\u00b0'}</b>\n            </div>\n            <div style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              display: 'flex',\n              margin: '10px'\n            }}>\n              <b>{element.weather[0].description}</b>\n            </div>\n            <img style={{verticalAlign: 'middle'}}\n                 src={`http://openweathermap.org/img/w/${element.weather[0].icon}.png`}\n                 alt=''/>\n          </div>\n        })}\n    </div>\n  </div>\n}\n\n","import React from 'react'\n// import style from './App.module.css'\nimport Header from './c1-header/Header'\nimport Weather from './c2-weather/Weather'\nimport {Route, Switch} from 'react-router-dom'\nimport History from './c3- history/History'\n\nfunction App() {\n\n  // const check = function () {\n  //   const theTime = new Date()\n  //   const theHour = theTime.getHours()\n  //\n  //   if (theHour > 6 && theHour < 12) {\n  //     return style.morning\n  //   } else if (theHour > 12 && theHour < 18) {\n  //     return style.day\n  //   } else if (theHour > 18 && theHour < 24) {\n  //     return style.evening\n  //   } else if (theHour < 6) {\n  //     return style.night\n  //   }\n  // }\n  //\n  // setInterval(check, 30000)\n\n  return (\n    <div\n      // className={check()}\n    >\n      <Header/>\n      <div>\n        <Switch>\n          <Route exact path='/' render={() => <Weather/>}/>\n          <Route path='/history' render={() => <History/>}/>\n        </Switch>\n      </div>\n    </div>)\n}\n\nexport default App\n","import React from 'react'\nimport {render} from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport {HashRouter} from 'react-router-dom'\nimport App from './components/App'\nimport {Provider} from 'react-redux'\nimport {store} from './redux/store'\n\nrender(\n  <HashRouter>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}