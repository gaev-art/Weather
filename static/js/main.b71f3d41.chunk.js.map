{"version":3,"sources":["components/c1-header/Header.module.css","components/c2-weather/Weather.module.css","components/c3- history/History.module.css","serviceWorker.ts","components/c1-header/Header.tsx","api/weatherApi.ts","redux/weatherReducer.ts","redux/store.ts","components/c2-weather/search/Search.tsx","components/c2-weather/Weather.tsx","components/c3- history/History.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","style","grow","AppBar","color","Toolbar","container","List","nav","to","ListItem","button","getWeatherApi","cityName","axios","get","then","response","data","initialState","weather","weatherHistory","actions","type","rootReducer","combineReducers","weatherPage","state","action","reverse","useAppSelector","useSelector","store","createStore","composeWithDevTools","applyMiddleware","thunk","Search","dispatch","useDispatch","useState","city","setCity","onSubmit","a","console","log","TextField","label","value","onChange","e","currentTarget","Weather","name","main","sys","item","Math","floor","temp","width","verticalAlign","src","icon","alt","description","Date","Number","sunrise","toLocaleTimeString","sunset","History","useEffect","map","element","index","key","display","alignItems","justifyContent","margin","App","exact","path","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,IAAM,sB,mBCA1FD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,KAAO,wB,mBCAhED,EAAOC,QAAU,CAAC,UAAY,2BAA2B,KAAO,wB,iICW5CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iECTS,SAASC,IACtB,OACE,yBAAKC,UAAWC,IAAMC,MACpB,kBAACC,EAAA,EAAD,CAAQC,MAAM,WACZ,kBAACC,EAAA,EAAD,CAASL,UAAWC,IAAMK,WACxB,yBAAKN,UAAWC,IAAMC,OACtB,kBAACK,EAAA,EAAD,CAAMP,UAAWC,IAAMO,KACrB,kBAAC,IAAD,CAASC,GAAG,KACV,kBAACC,EAAA,EAAD,CAAUC,QAAM,GAAhB,YAIF,kBAAC,IAAD,CAASF,GAAG,YACV,kBAACC,EAAA,EAAD,CAAUC,QAAM,GAAhB,aAKJ,yBAAKX,UAAWC,IAAMC,U,sECvBnBU,EAAgB,SAChBC,GACT,OAAOC,IAAMC,IAAN,4DAEgDF,IACpDG,MAAK,SAAAC,GACJ,OAAOA,EAASC,SANXN,EAAgB,WAUzB,OAAOE,IAAMC,IAAN,gDAGJC,MAAK,SAAAC,GACJ,OAAOA,EAASC,SCRlBC,EAAe,CACnBC,QAAS,GACTC,eAAgB,IA2BZC,EACmB,SAACF,GACtB,MAAO,CACLG,KApCmB,mBAqCnBH,YAJAE,EAOsB,SAACD,GACzB,MAAO,CACLE,KAzCsB,sBA0CtBF,mB,gBC1CAG,EAAcC,0BAAgB,CAClCC,YDS4B,WAAkE,IAAjEC,EAAgE,uDAAxDR,EAAcS,EAA0C,uCAC7F,OAAQA,EAAOL,MACb,IAbqB,mBAcnB,OAAO,2BACFI,GADL,IAEEP,QAASQ,EAAOR,UAIpB,IAnBwB,sBAoBtB,OAAO,2BACFO,GADL,IAEEN,eAAgBO,EAAOP,eAAeQ,YAG1C,QACE,OAAOF,MChBAG,EAAqDC,IAEvDC,EAAQC,sBAAYT,EAAaU,8BAAoBC,0BAAgBC,O,kCCdjE,SAASC,IACtB,IAAMC,EAAWC,cADc,EAIPC,mBAAS,IAJF,mBAIxBC,EAJwB,KAIlBC,EAJkB,KAc/B,OACE,0BAAMC,SATiB,WF6CG,IAAC9B,EE5C3ByB,GF4C2BzB,EE5CH4B,EF4CE,uCAAsB,WAAOH,GAAP,eAAAM,EAAA,sEACjChC,EAAyBC,GADQ,OAC9CK,EAD8C,OAElD2B,QAAQC,IAAI5B,GACZoB,EAAShB,EAA8BJ,EAAKE,UAHM,2CAAtB,wDE3C1BsB,EAAQ,MAQN,kBAACK,EAAA,EAAD,CACEC,MAAM,aACN5C,MAAM,UACN6C,MAAOR,EACPS,SATyB,SAACC,GAAD,OAAsCT,EAAQS,EAAEC,cAAcH,WCVhF,SAASI,IAEtB,IAAMC,EAAOxB,GAAe,SAAAH,GAAK,OAAIA,EAAMD,YAAYN,QAAQkC,QACzDC,EAAOzB,GAAe,SAAAH,GAAK,OAAIA,EAAMD,YAAYN,QAAQmC,QACzDnC,EAAUU,GAAe,SAAAH,GAAK,OAAIA,EAAMD,YAAYN,QAAQA,WAC5DoC,EAAM1B,GAAe,SAAAH,GAAK,OAAIA,EAAMD,YAAYN,QAAQoC,OAE9D,OAAO,yBAAKxD,UAAWC,IAAMK,WAC3B,yBAAKN,UAAWC,IAAMwD,MACpB,kBAACpB,EAAD,MACCiB,GAAQ,6BAAK,sCAAeA,GAC5BC,GAAQ,6BAAK,6CAAsBG,KAAKC,MAAMJ,EAAKK,MAA3C,IAAmD,QAC3DxC,GACD,6BACE,6CACA,yBAAKnB,MAAO,CAAC4D,MAAO,OAAQC,cAAe,UACtCC,IAAG,0CAAqC3C,EAAQ,GAAG4C,KAAhD,QACHC,IAAI,KACR7C,EAAQ,GAAG8C,aAEbV,GAAO,6BAAK,yCAAkB,IAAIW,KAA2B,IAAtBC,OAAOZ,EAAIa,UAAiBC,sBACnEd,GAAO,6BAAK,wCAAiB,IAAIW,KAA0B,IAArBC,OAAOZ,EAAIe,SAAgBD,wB,6BCrBzD,SAASE,IAEtB,IAAMlC,EAAWC,cACjBkC,qBAAU,WACRnC,EJsD6B,uCAAM,WAAOA,GAAP,eAAAM,EAAA,sEACpBhC,IADoB,OACjCM,EADiC,OAErC2B,QAAQC,IAAI5B,GACZoB,EAAShB,EAAiCJ,IAHL,2CAAN,yDIrD5B,CAACoB,IAEJ,IAAMjB,EAAiBS,GAAe,SAAAH,GAAK,OAAIA,EAAMD,YAAYL,kBAEjE,OAAO,yBAAKrB,UAAWC,IAAMK,WAC3B,yBAAKN,UAAWC,IAAMwD,MACnBpC,EACEqD,KAAI,SAACC,EAASC,GACb,OAAO,yBAAKC,IAAKD,EAAO3E,MAAO,CAC7B6E,QAAS,SAKT,yBAAK7E,MAAO,CACV8E,WAAY,SACZC,eAAgB,SAChBF,QAAS,OACTG,OAAQ,SAER,2BAAIN,EAAQrB,OAEd,yBAAKrD,MAAO,CACV8E,WAAY,SACZC,eAAgB,SAChBF,QAAS,OACTG,OAAQ,SAER,2BAAIvB,KAAKC,MAAMgB,EAAQpB,KAAKK,MAA5B,IAAoC,SAEtC,yBAAK3D,MAAO,CACV8E,WAAY,SACZC,eAAgB,SAChBF,QAAS,OACTG,OAAQ,SAER,2BAAIN,EAAQvD,QAAQ,GAAG8C,cAEzB,yBAAKjE,MAAO,CAAC6D,cAAe,UACvBC,IAAG,0CAAqCY,EAAQvD,QAAQ,GAAG4C,KAAxD,QACHC,IAAI,WCXNiB,MAjCf,WAmBE,OACE,6BAGE,kBAACnF,EAAD,MACA,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAChC,EAAD,SACpC,kBAAC,IAAD,CAAO+B,KAAK,WAAWC,OAAQ,kBAAM,kBAACb,EAAD,aCzB/Ca,iBACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUrD,MAAOA,GACf,kBAAC,EAAD,QAGJsD,SAASC,eAAe,ST4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1E,MAAK,SAAA2E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.b71f3d41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__PPVQ1\",\"grow\":\"Header_grow__3sVSG\",\"nav\":\"Header_nav__14AlS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__2hI-n\",\"item\":\"Weather_item__1iOhn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"History_container__2ai7V\",\"item\":\"History_item__3qxzw\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport style from './Header.module.css';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className={style.grow}>\r\n      <AppBar color=\"inherit\">\r\n        <Toolbar className={style.container}>\r\n          <div className={style.grow}/>\r\n          <List className={style.nav}>\r\n            <NavLink to='/'>\r\n              <ListItem button>\r\n                Weather\r\n              </ListItem>\r\n            </NavLink>\r\n            <NavLink to='/history'>\r\n              <ListItem button>\r\n                History\r\n              </ListItem>\r\n            </NavLink>\r\n          </List>\r\n          <div className={style.grow}/>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import axios from 'axios'\r\nimport {LocationWeather, Weather} from '../types/entities'\r\n\r\n\r\nexport const getWeatherApi = {\r\n  getWeather(cityName: string) {\r\n    return axios.get<LocationWeather>(\r\n      // `http://localhost:5000/weather?city=${cityName}`)\r\n      `https://back-4-weather.herokuapp.com/weather?city=${cityName}`)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n  getHistoryWeather() {\r\n    return axios.get<Weather[]>(\r\n      // `http://localhost:5000/history`)\r\n      `https://back-4-weather.herokuapp.com/history`)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {getWeatherApi} from '../api/weatherApi'\r\nimport {Dispatch} from 'redux'\r\nimport {Weather} from '../types/entities'\r\nimport {InferActionTypes} from './store'\r\n\r\n\r\nconst SET_WEATHER_DATA = 'SET_WEATHER_DATA'\r\nconst SET_WEATHER_HISTORY = 'SET_WEATHER_HISTORY'\r\n\r\n\r\nconst initialState = {\r\n  weather: {} as Weather,\r\n  weatherHistory: [] as Weather[]\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const weatherReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_WEATHER_DATA: {\r\n      return {\r\n        ...state,\r\n        weather: action.weather,\r\n\r\n      }\r\n    }\r\n    case SET_WEATHER_HISTORY: {\r\n      return {\r\n        ...state,\r\n        weatherHistory: action.weatherHistory.reverse()\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n  setWeatherDataSuccess: (weather: Weather) => {\r\n    return {\r\n      type: SET_WEATHER_DATA,\r\n      weather\r\n    } as const\r\n  },\r\n  setWeatherHistorySuccess: (weatherHistory: Weather[]) => {\r\n    return {\r\n      type: SET_WEATHER_HISTORY,\r\n      weatherHistory\r\n    } as const\r\n  },\r\n\r\n}\r\n\r\n\r\nexport const getCityWeather = (cityName: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n  let data = await getWeatherApi.getWeather(cityName)\r\n  console.log(data)\r\n  dispatch(actions.setWeatherDataSuccess(data.weather))\r\n\r\n}\r\n\r\n\r\nexport const getHistoryWeather = () => async (dispatch: Dispatch<ActionsType>) => {\r\n  let data = await getWeatherApi.getHistoryWeather()\r\n  console.log(data)\r\n  dispatch(actions.setWeatherHistorySuccess(data))\r\n\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {weatherReducer} from './weatherReducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {useSelector, TypedUseSelectorHook} from 'react-redux'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  weatherPage: weatherReducer,\r\n\r\n});\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {useDispatch} from 'react-redux';\r\nimport {getCityWeather} from '../../../redux/weatherReducer';\r\n\r\nexport default function Search() {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const [city, setCity] = useState('')\r\n\r\n  const getWeatherInCity = () => {\r\n    dispatch(getCityWeather(city))\r\n    setCity('')\r\n  }\r\n\r\n  const handleWordSearchChange = (e: ChangeEvent<HTMLInputElement>) => setCity(e.currentTarget.value)\r\n\r\n\r\n  return (\r\n    <form onSubmit={getWeatherInCity}>\r\n      <TextField\r\n        label=\"Enter City\"\r\n        color=\"primary\"\r\n        value={city}\r\n        onChange={handleWordSearchChange}\r\n      />\r\n    </form>)\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport {useAppSelector} from '../../redux/store';\r\nimport style from './Weather.module.css';\r\nimport Search from './search/Search';\r\n\r\n\r\nexport default function Weather() {\r\n\r\n  const name = useAppSelector(state => state.weatherPage.weather.name)\r\n  const main = useAppSelector(state => state.weatherPage.weather.main)\r\n  const weather = useAppSelector(state => state.weatherPage.weather.weather)\r\n  const sys = useAppSelector(state => state.weatherPage.weather.sys)\r\n\r\n  return <div className={style.container}>\r\n    <div className={style.item}>\r\n      <Search/>\r\n      {name && <div><b>City : </b>{name}</div>}\r\n      {main && <div><b>Temperature : </b>{Math.floor(main.temp)}C{'\\u00b0'}</div>}\r\n      {weather &&\r\n      <div>\r\n        <b>Description : </b>\r\n        <img style={{width: '30px', verticalAlign: 'middle'}}\r\n             src={`http://openweathermap.org/img/w/${weather[0].icon}.png`}\r\n             alt=''/>\r\n        {weather[0].description}\r\n      </div>}\r\n      {sys && <div><b>Sunrise : </b>{new Date(Number(sys.sunrise) * 1000).toLocaleTimeString()}</div>}\r\n      {sys && <div><b>Sunset : </b>{new Date(Number(sys.sunset) * 1000).toLocaleTimeString()}</div>}\r\n\r\n    </div>\r\n  </div>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport style from './History.module.css'\r\nimport {useAppSelector} from '../../redux/store'\r\nimport {useDispatch} from 'react-redux'\r\nimport {getHistoryWeather} from '../../redux/weatherReducer'\r\n\r\nexport default function History() {\r\n\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(getHistoryWeather())\r\n  }, [dispatch])\r\n\r\n  const weatherHistory = useAppSelector(state => state.weatherPage.weatherHistory)\r\n\r\n  return <div className={style.container}>\r\n    <div className={style.item}>\r\n      {weatherHistory\r\n        .map((element, index) => {\r\n          return <div key={index} style={{\r\n            display: 'flex'\r\n          }}>\r\n            {/*<div style={{alignItems: 'center', justifyContent: 'center', display: 'flex', margin: '10px'}}>*/}\r\n            {/*  {element.datesInfo.day}.{element.datesInfo.month}.{element.datesInfo.year} {element.datesInfo.hours}:{element.datesInfo.minutes}*/}\r\n            {/*</div>*/}\r\n            <div style={{\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              display: 'flex',\r\n              margin: '10px',\r\n            }}>\r\n              <b>{element.name}</b>\r\n            </div>\r\n            <div style={{\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              display: 'flex',\r\n              margin: '10px'\r\n            }}>\r\n              <b>{Math.floor(element.main.temp)}C{'\\u00b0'}</b>\r\n            </div>\r\n            <div style={{\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              display: 'flex',\r\n              margin: '10px'\r\n            }}>\r\n              <b>{element.weather[0].description}</b>\r\n            </div>\r\n            <img style={{verticalAlign: 'middle'}}\r\n                 src={`http://openweathermap.org/img/w/${element.weather[0].icon}.png`}\r\n                 alt=''/>\r\n          </div>\r\n        })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\n","import React from 'react'\r\n// import style from './App.module.css'\r\nimport Header from './c1-header/Header'\r\nimport Weather from './c2-weather/Weather'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport History from './c3- history/History'\r\n\r\nfunction App() {\r\n\r\n  // const check = function () {\r\n  //   const theTime = new Date()\r\n  //   const theHour = theTime.getHours()\r\n  //\r\n  //   if (theHour > 6 && theHour < 12) {\r\n  //     return style.morning\r\n  //   } else if (theHour > 12 && theHour < 18) {\r\n  //     return style.day\r\n  //   } else if (theHour > 18 && theHour < 24) {\r\n  //     return style.evening\r\n  //   } else if (theHour < 6) {\r\n  //     return style.night\r\n  //   }\r\n  // }\r\n  //\r\n  // setInterval(check, 30000)\r\n\r\n  return (\r\n    <div\r\n      // className={check()}\r\n    >\r\n      <Header/>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path='/' render={() => <Weather/>}/>\r\n          <Route path='/history' render={() => <History/>}/>\r\n        </Switch>\r\n      </div>\r\n    </div>)\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport {render} from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport App from './components/App'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './redux/store'\r\n\r\nrender(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}